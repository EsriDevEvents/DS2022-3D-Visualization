var I=Object.defineProperty,M=Object.defineProperties;var E=Object.getOwnPropertyDescriptors;var S=Object.getOwnPropertySymbols;var P=Object.prototype.hasOwnProperty,T=Object.prototype.propertyIsEnumerable;var x=(e,t,r)=>t in e?I(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,p=(e,t)=>{for(var r in t||(t={}))P.call(t,r)&&x(e,r,t[r]);if(S)for(var r of S(t))T.call(t,r)&&x(e,r,t[r]);return e},d=(e,t)=>M(e,E(t));import{rk as L,rO as R,rl as j,mi as N,mj as q,mk as F,ml as J,rm as U,rq as k,rP as A,dB as V,l as z,V as C,cn as W,s7 as O,s8 as f,s9 as w,h8 as _,sa as B,b6 as $,c4 as b,a7 as D,aR as G,c6 as H,rs as K,rQ as Q,M as a,O as n,ee as X,oc as Y,ef as Z,mp as ee,Q as te}from"./vendor.96994164.js";import{S as re,y as se,W as ie}from"./SublayersOwner.94e9832a.js";let s=class extends L(R(j(re(se(N(q(F(J(U(k(A(V(z))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return typeof e=="string"?p({url:e},t):e}load(e){const t=C(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(W).then(()=>this._fetchService(t))),Promise.resolve(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.indexOf("PNG32")>-1?"png32":"png24"}writeSublayers(e,t,r,i){if(!this.loaded||!e)return;const y=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let l=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const o=O(i.origin);if(o===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;l=w(y,c,f.SERVICE)}else if(o>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");l=w(y,c.sublayers,O(c.origin))}}const u=[],h=p({writeSublayerStructure:l},i);let m=l;y.forEach(o=>{const c=o.write({},h);u.push(c),m=m||o.originOf("visible")==="user"}),u.some(o=>Object.keys(o).length>1)&&(t.layers=u),m&&(t.visibleLayers=y.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,t,r,i){const y=i&&i.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new _({layer:this,floors:i==null?void 0:i.floors,scale:B({extent:e,width:t})*y}),u=l.toJSON();l.destroy();const h=!i||!i.rotation||this.version<10.3?{}:{rotation:-i.rotation},m=e&&e.spatialReference,o=m.wkid||JSON.stringify(m.toJSON());u.dpi*=y;const c={};if(i!=null&&i.timeExtent){const{start:g,end:v}=i.timeExtent.toJSON();c.time=g&&v&&g===v?""+g:`${g==null?"null":g},${v==null?"null":v}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return p(p(p({bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:o,imageSR:o,size:t+","+r},u),h),c)}async fetchImage(e,t,r,i){var y;const l={responseType:"image",signal:(y=i==null?void 0:i.signal)!=null?y:null,query:d(p(p(d(p(p({},this.parsedUrl.query),this.createExportImageParameters(e,t,r,i)),{f:"image"}),this.refreshParameters),this.customParameters),{token:this.apiKey})},u=this.parsedUrl.path+"/export";return l.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers?Promise.reject(new $("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query})):b(u,l).then(h=>h.data).catch(h=>{throw D(h)?h:new $("mapimagelayer:image-fetch-error",`Unable to load image: ${u}`,{error:h})})}async fetchRecomputedExtents(e={}){const t=d(p({},e),{query:d(p({returnUpdates:!0,f:"json"},this.customParameters),{token:this.apiKey})}),{data:r}=await b(this.url,t),{extent:i,fullExtent:y,timeExtent:l}=r,u=i||y;return{fullExtent:u&&G.fromJSON(u),timeExtent:l&&H.fromJSON({start:l[0],end:l[1]})}}loadAll(){return K(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Q(this,e)}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await b(this.parsedUrl.path,{query:d(p(p({f:"json"},this.parsedUrl.query),this.customParameters),{token:this.apiKey}),signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};a([n({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),a([n()],s.prototype,"dpi",void 0),a([n()],s.prototype,"gdbVersion",void 0),a([n()],s.prototype,"imageFormat",void 0),a([X("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),a([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),a([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),a([n()],s.prototype,"imageTransparency",void 0),a([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),a([n({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),a([n({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),a([n({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),a([n()],s.prototype,"sourceJSON",void 0),a([n({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),a([Y("sublayers",{layers:{type:[ie]},visibleLayers:{type:[Z]}})],s.prototype,"writeSublayers",null),a([n({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),a([n({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),a([n(ee)],s.prototype,"url",void 0),s=a([te("esri.layers.MapImageLayer")],s);const le=s;export{le as default};
